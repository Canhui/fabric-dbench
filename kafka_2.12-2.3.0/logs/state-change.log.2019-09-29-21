[2019-09-29 21:56:46,484] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=state.change.logger (state.change.logger)
[2019-09-29 21:58:55,986] TRACE [Controller id=0 epoch=2] Received response {error_code=0} for request UPDATE_METADATA with correlation id 0 sent to broker host01:9092 (id: 0 rack: null) (state.change.logger)
[2019-09-29 21:58:55,999] TRACE [Controller id=0 epoch=2] Changed state of replica 3 for partition testchainid-0 from ReplicaDeletionIneligible to OfflineReplica (state.change.logger)
[2019-09-29 21:58:55,999] TRACE [Controller id=0 epoch=2] Sending UpdateMetadata request PartitionState(controllerEpoch=2, leader=-1, leaderEpoch=2, isr=[3], zkVersion=2, replicas=[3], offlineReplicas=[3]) to brokers Set(0) for partition testchainid-0 (state.change.logger)
[2019-09-29 21:58:56,005] TRACE [Broker id=0] Cached leader info PartitionState(controllerEpoch=2, leader=-1, leaderEpoch=2, isr=[3], zkVersion=2, replicas=[3], offlineReplicas=[3]) for partition testchainid-0 in response to UpdateMetadata request sent by controller 0 epoch 2 with correlation id 1 (state.change.logger)
[2019-09-29 21:58:56,006] TRACE [Controller id=0 epoch=2] Received response {error_code=0} for request UPDATE_METADATA with correlation id 1 sent to broker host01:9092 (id: 0 rack: null) (state.change.logger)
[2019-09-29 21:58:56,021] ERROR [Controller id=0 epoch=2] Controller 0 epoch 2 failed to change state for partition testchainid-0 from OfflinePartition to OnlinePartition (state.change.logger)
kafka.common.StateChangeFailedException: Failed to elect leader for partition testchainid-0 under strategy OfflinePartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$9(PartitionStateMachine.scala:381)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:378)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:305)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:215)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:145)
	at kafka.controller.PartitionStateMachine.triggerOnlineStateChangeForPartitions(PartitionStateMachine.scala:73)
	at kafka.controller.PartitionStateMachine.triggerOnlinePartitionStateChange(PartitionStateMachine.scala:58)
	at kafka.controller.PartitionStateMachine.startup(PartitionStateMachine.scala:41)
	at kafka.controller.KafkaController.onControllerFailover(KafkaController.scala:269)
	at kafka.controller.KafkaController.elect(KafkaController.scala:1226)
	at kafka.controller.KafkaController.processStartup(KafkaController.scala:1141)
	at kafka.controller.KafkaController.process(KafkaController.scala:1604)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:53)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:137)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:137)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:89)
